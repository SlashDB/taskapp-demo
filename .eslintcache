[{"C:\\SlashDB\\task-app\\src\\index.js":"1","C:\\SlashDB\\task-app\\src\\App.js":"2","C:\\SlashDB\\task-app\\src\\reportWebVitals.js":"3","C:\\SlashDB\\task-app\\src\\components\\Lists.js":"4","C:\\SlashDB\\task-app\\src\\components\\Header.js":"5","C:\\SlashDB\\task-app\\src\\components\\List.js":"6","C:\\SlashDB\\task-app\\src\\components\\Task.js":"7","C:\\SlashDB\\task-app\\src\\components\\NewListArea.js":"8","C:\\SlashDB\\task-app\\src\\slashDBwrapper.js":"9","C:\\SlashDB\\task-app\\src\\components\\Name.js":"10","C:\\SlashDB\\task-app - With_SDK\\src\\index.js":"11","C:\\SlashDB\\task-app - With_SDK\\src\\App.js":"12","C:\\SlashDB\\task-app - With_SDK\\src\\components\\Lists.js":"13","C:\\SlashDB\\task-app - With_SDK\\src\\components\\Header.js":"14","C:\\SlashDB\\task-app - With_SDK\\src\\components\\NewListArea.js":"15","C:\\SlashDB\\task-app - With_SDK\\src\\components\\List.js":"16","C:\\SlashDB\\task-app - With_SDK\\src\\components\\Name.js":"17","C:\\SlashDB\\task-app - With_SDK\\src\\components\\Task.js":"18","C:\\SlashDB\\task-app - With_SDK\\src\\ListApp.js":"19","C:\\SlashDB\\task-app - With_SDK\\src\\Login.js":"20","C:\\SlashDB\\task-app - With_SDK\\src\\ProtectedRoute.js":"21","C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\hooks.js":"22","C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\auth.js":"23","C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\slashdb.js":"24","C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\cookies.js":"25","C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\Context.js":"26","C:\\SlashDB\\task-app - With_SDK\\src\\Test.js":"27","C:\\task-app-slashdb\\src\\index.js":"28","C:\\task-app-slashdb\\src\\App.js":"29","C:\\task-app-slashdb\\src\\sdk\\Context.js":"30","C:\\task-app-slashdb\\src\\Test.js":"31","C:\\task-app-slashdb\\src\\Login.js":"32","C:\\task-app-slashdb\\src\\ListApp.js":"33","C:\\task-app-slashdb\\src\\ProtectedRoute.js":"34","C:\\task-app-slashdb\\src\\components\\Header.js":"35","C:\\task-app-slashdb\\src\\components\\Lists.js":"36","C:\\task-app-slashdb\\src\\sdk\\auth.js":"37","C:\\task-app-slashdb\\src\\sdk\\hooks.js":"38","C:\\task-app-slashdb\\src\\components\\NewListArea.js":"39","C:\\task-app-slashdb\\src\\components\\List.js":"40","C:\\task-app-slashdb\\src\\sdk\\slashdb.js":"41","C:\\task-app-slashdb\\src\\components\\Name.js":"42","C:\\task-app-slashdb\\src\\components\\Task.js":"43","C:\\task-app-slashdb\\src\\sdk\\cookies.js":"44","C:\\Current\\App\\src\\index.js":"45","C:\\Current\\App\\src\\App.js":"46","C:\\Current\\App\\src\\sdk\\Context.js":"47","C:\\Current\\App\\src\\ListApp.js":"48","C:\\Current\\App\\src\\Test.js":"49","C:\\Current\\App\\src\\Login.js":"50","C:\\Current\\App\\src\\ProtectedRoute.js":"51","C:\\Current\\App\\src\\components\\Header.js":"52","C:\\Current\\App\\src\\components\\Lists.js":"53","C:\\Current\\App\\src\\sdk\\auth.js":"54","C:\\Current\\App\\src\\components\\NewListArea.js":"55","C:\\Current\\App\\src\\sdk\\hooks.js":"56","C:\\Current\\App\\src\\components\\List.js":"57","C:\\Current\\App\\src\\sdk\\slashdb.js":"58","C:\\Current\\App\\src\\components\\Name.js":"59","C:\\Current\\App\\src\\components\\Task.js":"60","C:\\Current\\App\\src\\sdk\\cookies.js":"61"},{"size":634,"mtime":1609360777248,"results":"62","hashOfConfig":"63"},{"size":1106,"mtime":1609362405142,"results":"64","hashOfConfig":"63"},{"size":362,"mtime":499162500000,"results":"65","hashOfConfig":"63"},{"size":447,"mtime":1609266464325,"results":"66","hashOfConfig":"63"},{"size":475,"mtime":1609102937483,"results":"67","hashOfConfig":"63"},{"size":3843,"mtime":1609308558937,"results":"68","hashOfConfig":"63"},{"size":2122,"mtime":1609308543754,"results":"69","hashOfConfig":"63"},{"size":1585,"mtime":1609361285777,"results":"70","hashOfConfig":"63"},{"size":3583,"mtime":1609362333865,"results":"71","hashOfConfig":"63"},{"size":394,"mtime":1609307955888,"results":"72","hashOfConfig":"63"},{"size":562,"mtime":1611313953363,"results":"73","hashOfConfig":"74"},{"size":556,"mtime":1611315351109,"results":"75","hashOfConfig":"74"},{"size":611,"mtime":1610358522933,"results":"76","hashOfConfig":"74"},{"size":485,"mtime":1610590098845,"results":"77","hashOfConfig":"74"},{"size":1419,"mtime":1610954874168,"results":"78","hashOfConfig":"74"},{"size":3936,"mtime":1611286804263,"results":"79","hashOfConfig":"74"},{"size":426,"mtime":1610954667323,"results":"80","hashOfConfig":"74"},{"size":2399,"mtime":1610399784040,"results":"81","hashOfConfig":"74"},{"size":1311,"mtime":1611294697478,"results":"82","hashOfConfig":"74"},{"size":1968,"mtime":1611286760683,"results":"83","hashOfConfig":"74"},{"size":866,"mtime":1611316310531,"results":"84","hashOfConfig":"74"},{"size":3638,"mtime":1611316269606,"results":"85","hashOfConfig":"74"},{"size":1164,"mtime":1611316251336,"results":"86","hashOfConfig":"74"},{"size":7509,"mtime":1611313871865,"results":"87","hashOfConfig":"74"},{"size":640,"mtime":1611286322573,"results":"88","hashOfConfig":"74"},{"size":350,"mtime":1611314155133,"results":"89","hashOfConfig":"74"},{"size":706,"mtime":1617115952969,"results":"90","hashOfConfig":"74"},{"size":562,"mtime":1611313953363,"results":"91","hashOfConfig":"92"},{"size":556,"mtime":1611315351109,"results":"93","hashOfConfig":"92"},{"size":350,"mtime":1611314155133,"results":"94","hashOfConfig":"92"},{"size":706,"mtime":1617115952969,"results":"95","hashOfConfig":"92"},{"size":1968,"mtime":1611286760683,"results":"96","hashOfConfig":"92"},{"size":1311,"mtime":1611294697478,"results":"97","hashOfConfig":"92"},{"size":866,"mtime":1611316310531,"results":"98","hashOfConfig":"92"},{"size":485,"mtime":1610590098845,"results":"99","hashOfConfig":"92"},{"size":611,"mtime":1610358522933,"results":"100","hashOfConfig":"92"},{"size":1164,"mtime":1611316251336,"results":"101","hashOfConfig":"92"},{"size":3638,"mtime":1611316269606,"results":"102","hashOfConfig":"92"},{"size":1419,"mtime":1610954874168,"results":"103","hashOfConfig":"92"},{"size":3936,"mtime":1611286804263,"results":"104","hashOfConfig":"92"},{"size":7509,"mtime":1611313871865,"results":"105","hashOfConfig":"92"},{"size":426,"mtime":1610954667323,"results":"106","hashOfConfig":"92"},{"size":2399,"mtime":1610399784040,"results":"107","hashOfConfig":"92"},{"size":640,"mtime":1611286322573,"results":"108","hashOfConfig":"92"},{"size":619,"mtime":1630403229463,"results":"109","hashOfConfig":"110"},{"size":616,"mtime":1630289265171,"results":"111","hashOfConfig":"110"},{"size":555,"mtime":1630287984653,"results":"112","hashOfConfig":"110"},{"size":1264,"mtime":1630289745421,"results":"113","hashOfConfig":"110"},{"size":682,"mtime":1617119658000,"results":"114","hashOfConfig":"110"},{"size":2048,"mtime":1630298066499,"results":"115","hashOfConfig":"110"},{"size":915,"mtime":1630287839800,"results":"116","hashOfConfig":"110"},{"size":461,"mtime":1617119658000,"results":"117","hashOfConfig":"110"},{"size":582,"mtime":1617119658000,"results":"118","hashOfConfig":"110"},{"size":1084,"mtime":1630365486315,"results":"119","hashOfConfig":"110"},{"size":1358,"mtime":1617119658000,"results":"120","hashOfConfig":"110"},{"size":7314,"mtime":1630401656596,"results":"121","hashOfConfig":"110"},{"size":3742,"mtime":1629995136842,"results":"122","hashOfConfig":"110"},{"size":12578,"mtime":1630394687788,"results":"123","hashOfConfig":"110"},{"size":409,"mtime":1629995508908,"results":"124","hashOfConfig":"110"},{"size":2219,"mtime":1630400145159,"results":"125","hashOfConfig":"110"},{"size":1138,"mtime":1630393257807,"results":"126","hashOfConfig":"110"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"feyvwx",{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"129"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"129"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},"zug94r",{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"153"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"153"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13ecizh",{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},"14fkn2",{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"225"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"225"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},"C:\\SlashDB\\task-app\\src\\index.js",[],["262","263"],"C:\\SlashDB\\task-app\\src\\App.js",[],"C:\\SlashDB\\task-app\\src\\reportWebVitals.js",[],"C:\\SlashDB\\task-app\\src\\components\\Lists.js",[],"C:\\SlashDB\\task-app\\src\\components\\Header.js",[],"C:\\SlashDB\\task-app\\src\\components\\List.js",[],"C:\\SlashDB\\task-app\\src\\components\\Task.js",[],["264","265"],"C:\\SlashDB\\task-app\\src\\components\\NewListArea.js",["266"],"import React, { useState } from 'react';\r\nimport { fetchWrapper } from './../slashDBwrapper';\r\nimport { useQuery } from './../slashDBwrapper';\r\n\r\nexport default function NewListArea(props) {\r\n  const { getLists } = props;\r\n  const [listName, setListName] = useState('');\r\n\r\n  function postList(body) {\r\n    return fetchWrapper.post(`/TaskList`, body).then(() => getLists());\r\n  }\r\n\r\n  const wrapper = {\r\n    width: '100vw',\r\n    margin: 'auto',\r\n  };\r\n  const inputWrapper = {\r\n    width: '300px',\r\n    height: '25px',\r\n    margin: '20px auto',\r\n  };\r\n  const inputStyle = {\r\n    flexGrow: '2',\r\n    width: '70%',\r\n    height: '23px',\r\n    backgroundColor: 'rgba(92, 112, 122, 0.32)',\r\n    border: 'none',\r\n    borderRadius: '10px',\r\n    outline: 'none',\r\n    cursor: 'pointer',\r\n  };\r\n  const buttonWrapper = {\r\n    height: '25px',\r\n    float: 'right',\r\n    backgroundColor: '#00afef',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '10px',\r\n    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.3)',\r\n    cursor: 'pointer',\r\n    outline: 'none',\r\n  };\r\n\r\n  return (\r\n    <div style={wrapper}>\r\n      <div style={inputWrapper}>\r\n        <input\r\n          style={inputStyle}\r\n          value={listName}\r\n          placeholder=\"New List...\"\r\n          onChange={(e) => setListName(e.target.value)}\r\n        />\r\n        <button\r\n          style={buttonWrapper}\r\n          onClick={() => {\r\n            postList({ Name: listName ? listName : 'New List' });\r\n            setListName('');\r\n          }}\r\n        >\r\n          Add list\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\SlashDB\\task-app\\src\\slashDBwrapper.js",["267"],"//Will need this later whe nwe turn the functions in to useGet, usePost.... hooks\r\n// import React, { createContext, useContext, useState, useCallback } from 'react';\r\n// export const SlashDBContext = createContext({});\r\n\r\n// export const SlashDBProvider = ({ baseUrl, children }) => (\r\n//   <SlashDBContext.Provider value={{ baseUrl }}>\r\n//     {children}\r\n//   </SlashDBContext.Provider>\r\n// );\r\n\r\n// const { baseUrl } = useContext(SlashDBContext);\r\n\r\nimport { useState, useEffect, createContext, useContext } from 'react';\r\n\r\nexport const SlashDBContext = createContext({});\r\n\r\nexport const SlashDBProvider = ({ baseUrl, children }) => (\r\n  <SlashDBContext.Provider value={{ baseUrl }}>\r\n    {children}\r\n  </SlashDBContext.Provider>\r\n);\r\n\r\nexport const fetchWrapper = {\r\n  setUp,\r\n  get,\r\n  post,\r\n  put,\r\n  delete: _delete,\r\n  query,\r\n  // useQuery,\r\n};\r\n\r\nlet basePath = '';\r\nlet dataBase = '';\r\nlet dataFormat = `.json`;\r\n\r\nfunction setUp(basepath, database, dataformat) {\r\n  basePath = basepath;\r\n  dataBase = database;\r\n  dataformat && (dataFormat = `.${dataformat}`);\r\n}\r\n\r\nasync function raw(httpMethod, url, body) {\r\n  const requestOptions = {\r\n    method: `${httpMethod}`,\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(body),\r\n  };\r\n  try {\r\n    return await fetch(\r\n      basePath + dataBase + url + dataFormat,\r\n      requestOptions\r\n    ).then(handleResponse);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nasync function get(url) {\r\n  //path, querryString - object, \r\n  return await raw('GET', url);\r\n}\r\n\r\nasync function post(url, body) {\r\n  return await raw('POST', url, body);\r\n}\r\n\r\nasync function put(url, body) {\r\n  return await raw('PUT', url, body);\r\n}\r\n\r\n// prefixed with underscored because delete is a reserved word in javascript\r\nasync function _delete(url) {\r\n  try {\r\n    return await raw('DELETE', url);\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\n// helper functions for response handling\r\nasync function handleResponse(response) {\r\n  return await response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n\r\n    if (!response.ok) {\r\n      const error = (data && data.message) || response.statusText;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return data;\r\n  });\r\n}\r\n\r\n/**\r\n * Component is described here.\r\n *\r\n * @query ./extra.examples.md\r\n */\r\nasync function query(fields, fct, body) {\r\n  let url = '';\r\n  fields.map((field) => {\r\n    return (url = url + '/' + field);\r\n  });\r\n  switch (fct) {\r\n    case 'get':\r\n      return await get(url);\r\n    case 'post':\r\n      return await post(url, body);\r\n    case 'put':\r\n      return await put(url, body);\r\n    case 'delete':\r\n      return await _delete(url);\r\n\r\n    default:\r\n      return await get(url);\r\n  }\r\n}\r\n\r\nexport function useQuery(fields, fct, body) {\r\n  const { baseUrl } = useContext(SlashDBContext);\r\n  console.log(baseUrl);\r\n  const [data, setData] = useState([]);\r\n  let url = '';\r\n\r\n  fields.map((field) => {\r\n    return (url = url + '/' + field);\r\n  });\r\n\r\n  useEffect(() => {\r\n    switch (fct) {\r\n      case 'get':\r\n        get(url).then((result) => setData(result));\r\n        break;\r\n      case 'post':\r\n        post(url, body).then((result) => setData(result));\r\n        break;\r\n      case 'put':\r\n        put(url, body).then((result) => setData(result));\r\n        break;\r\n      case 'delete':\r\n        _delete(url).then((result) => setData(result));\r\n        break;\r\n\r\n      default:\r\n        get(url).then((result) => setData(result));\r\n        break;\r\n    }\r\n  }, []);\r\n  return data;\r\n}\r\n","C:\\SlashDB\\task-app\\src\\components\\Name.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\index.js",[],["268","269"],"C:\\SlashDB\\task-app - With_SDK\\src\\App.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\components\\Lists.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\components\\Header.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\components\\NewListArea.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\components\\List.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\components\\Name.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\components\\Task.js",[],["270","271"],"C:\\SlashDB\\task-app - With_SDK\\src\\ListApp.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\Login.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\ProtectedRoute.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\hooks.js",["272"],"import { useState, useEffect, createContext, useContext, useRef } from 'react';\r\nimport { slashDB } from './slashdb';\r\nimport { SlashDBContext } from './Context';\r\n\r\nexport const useSetUp = () => {\r\n  const { baseUrl, setUpOptions } = useContext(SlashDBContext);\r\n  slashDB.setUp(baseUrl, setUpOptions);\r\n};\r\n\r\n//add functionality to take table after database as param\\\r\nexport const useDataDiscovery = (\r\n  database,\r\n  defaultFilterParameters,\r\n  queryStrParameters\r\n) => {\r\n  useSetUp();\r\n\r\n  const isMountedRef = useRef(null);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [didUpdate, setDidUpdate] = useState(new Date().getTime());\r\n\r\n  const handleSetData = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    setDidUpdate(new Date().getTime());\r\n  };\r\n\r\n  //filterParam rename\r\n  const _get = async (filterParameters, queryStrParameters, headers) => {\r\n    await slashDB\r\n      .dataDiscovery(\r\n        'get',\r\n        database,\r\n        filterParameters ? filterParameters : defaultFilterParameters,\r\n        queryStrParameters,\r\n        undefined,\r\n        headers\r\n      )\r\n      .then((data) => handleSetData(data))\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const _post = async (filterParameters, body, queryStrParameters, headers) => {\r\n    await slashDB\r\n      .dataDiscovery(\r\n        'post',\r\n        database,\r\n        filterParameters ? filterParameters : defaultFilterParameters,\r\n        queryStrParameters,\r\n        body,\r\n        headers\r\n      )\r\n      .then(handleUpdate);\r\n  };\r\n\r\n  const _put = async (filterParameters, body, queryStrParameters, headers) => {\r\n    await slashDB\r\n      .dataDiscovery(\r\n        'put',\r\n        database,\r\n        filterParameters ? filterParameters : defaultFilterParameters,\r\n        queryStrParameters,\r\n        body,\r\n        headers\r\n      )\r\n      .then(handleUpdate);\r\n  };\r\n\r\n  const _delete = async (filterParameters, queryStrParameters, headers) => {\r\n    await slashDB\r\n      .dataDiscovery(\r\n        'delete',\r\n        database,\r\n        filterParameters ? filterParameters : defaultFilterParameters,\r\n        queryStrParameters,\r\n        undefined,\r\n        headers\r\n      )\r\n      .then(handleUpdate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n    if (isMountedRef.current) {\r\n      _get(defaultFilterParameters, queryStrParameters);\r\n    }\r\n    return () => (isMountedRef.current = false);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [didUpdate]);\r\n\r\n  return [data, _get, _post, _put, _delete];\r\n};\r\n\r\nexport const useExecuteQuery = (\r\n  defHttpMethod,\r\n  queryID,\r\n  defParameters,\r\n  defQueryStrParameters\r\n) => {\r\n  useSetUp();\r\n\r\n  const isMountedRef = useRef(null);\r\n\r\n  const [data, setData] = useState([{}]);\r\n\r\n  const handleDataSet = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  const _executeQuery = async (\r\n    httpMethod,\r\n    parameters,\r\n    queryStrParameters,\r\n    headers\r\n  ) => {\r\n    await slashDB\r\n      .executeQuery(\r\n        httpMethod ? httpMethod : defHttpMethod,\r\n        queryID,\r\n        parameters ? defParameters : parameters,\r\n        queryStrParameters ? defQueryStrParameters : queryStrParameters,\r\n        headers\r\n      )\r\n      .then((data) => {\r\n        handleDataSet(data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n    if (isMountedRef.current) {\r\n      _executeQuery(defHttpMethod, defParameters);\r\n    }\r\n    return () => (isMountedRef.current = false);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [defHttpMethod]);\r\n\r\n  return [data, _executeQuery];\r\n};\r\n","C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\auth.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\slashdb.js",["273","274","275","276"],"import { setCookie, getCookie } from './cookies';\r\n\r\nexport const slashDB = {\r\n  setUp,\r\n  get,\r\n  post,\r\n  put,\r\n  delete: _delete,\r\n  executeQuery,\r\n  dataDiscovery,\r\n  authenticateCookieSessionLogin,\r\n  authenticateCookieSessionLogout,\r\n  isAuthenticated,\r\n  getIsAuthenticated,\r\n  setIsAuthenticated,\r\n};\r\n\r\nlet baseUrl = '';\r\nlet dataFormat = ``;\r\nlet apiKeyValue = ``;\r\n\r\nlet isAuthenticatedVar = false;\r\n\r\nfunction setUp(baseUrlPath, setUpOptions) {\r\n  baseUrl = baseUrlPath;\r\n  if (setUpOptions) {\r\n    setUpOptions.dataFormatExt &&\r\n      (dataFormat = `.${setUpOptions.dataFormatExt}`);\r\n    setUpOptions.apiKey && (apiKeyValue = setUpOptions.apiKey);\r\n  }\r\n}\r\n\r\n//authentication username, password with cookie\r\n\r\n//login\r\nasync function authenticateCookieSessionLogin(username, password) {\r\n  const temp = dataFormat;\r\n  dataFormat = '';\r\n  const urlPath = '/login';\r\n  const body = { login: username, password: password };\r\n  await raw('POST', urlPath, body, undefined, undefined, true).then((res) => {\r\n    if (res) {\r\n      // console.log('res');\r\n      // console.log(res);\r\n      if (res.status === 200 || 304) {\r\n        isAuthenticatedVar = true;\r\n        setCookie('user_id', username);\r\n      } else {\r\n        isAuthenticatedVar = false;\r\n        setCookie('user_id', '');\r\n      }\r\n    }\r\n  });\r\n  dataFormat = temp;\r\n}\r\n\r\n//logout\r\nasync function authenticateCookieSessionLogout() {\r\n  const temp = dataFormat;\r\n  dataFormat = '';\r\n  const urlPath = '/logout';\r\n  await raw('GET', urlPath, undefined, undefined, undefined, true).then(() => {\r\n    isAuthenticatedVar = false;\r\n    setCookie('user_id', '');\r\n  });\r\n\r\n  dataFormat = temp;\r\n}\r\n\r\nasync function isAuthenticated() {\r\n  const localUser = getCookie('user_id');\r\n  const url = `/userdef/${localUser}`;\r\n\r\n  await raw('GET', url, undefined, undefined, undefined, true)\r\n    .then((response) => {\r\n      return response.status === 200;\r\n    })\r\n    .then((value) => {\r\n      setIsAuthenticated(value);\r\n    });\r\n  console.log(getIsAuthenticated());\r\n  return getIsAuthenticated();\r\n}\r\n\r\nfunction getIsAuthenticated() {\r\n  return isAuthenticatedVar;\r\n}\r\n\r\nfunction setIsAuthenticated(x) {\r\n  isAuthenticatedVar = x;\r\n}\r\n\r\n//end of authentication\r\n\r\n//basic http requests - egt, post, put and delete call raw\r\nasync function raw(\r\n  httpMethod,\r\n  urlPath,\r\n  body,\r\n  queryStrParams,\r\n  headers,\r\n  onlyRes\r\n) {\r\n  //request paramiters\r\n  const queryStrParameters =\r\n    queryStrParams !== undefined\r\n      ? queryStrParamsConstructor(queryStrParams)\r\n      : '';\r\n  const url = baseUrl + urlPath + queryStrParameters;\r\n\r\n  const requestOptions = {\r\n    method: `${httpMethod}`,\r\n    credentials: 'include',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n      apikey: apiKeyValue !== undefined ? apiKeyValue : null,\r\n      ...headers,\r\n    },\r\n    body: body !== undefined ? JSON.stringify(body) : null,\r\n  };\r\n\r\n  const returnObj = { data: null, res: null };\r\n  try {\r\n    await fetch(url, requestOptions)\r\n      .then((response) => {\r\n        returnObj.res = response;\r\n        returnObj.data = onlyRes ? null : handleResponse(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n      });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n  if (onlyRes) {\r\n    return returnObj.res;\r\n  } else {\r\n    return [returnObj.data, returnObj.res];\r\n  }\r\n}\r\nasync function get(urlPath, queryStrParameters, headers) {\r\n  //path, querryString - object,\r\n  const [data, res] = await raw(\r\n    'GET',\r\n    urlPath,\r\n    undefined,\r\n    queryStrParameters,\r\n    headers\r\n  );\r\n  return data;\r\n}\r\nasync function post(urlPath, body, queryStrParameters, headers) {\r\n  const [data, res] = await raw(\r\n    'POST',\r\n    urlPath,\r\n    body,\r\n    queryStrParameters,\r\n    headers\r\n  );\r\n  return data;\r\n}\r\nasync function put(urlPath, body, queryStrParameters, headers) {\r\n  const [data, res] = await raw(\r\n    'PUT',\r\n    urlPath,\r\n    body,\r\n    queryStrParameters,\r\n    headers\r\n  );\r\n  return data;\r\n}\r\n// prefixed with underscored because delete is a reserved word in javascript\r\nasync function _delete(urlPath, queryStrParameters, headers) {\r\n  const [data, res] = await raw(\r\n    'DELETE',\r\n    urlPath,\r\n    undefined,\r\n    queryStrParameters,\r\n    headers\r\n  );\r\n  return data;\r\n}\r\n//end of http requests\r\n\r\n//Function to utalize SQLpassthrough - for executing a query\r\nasync function executeQuery(\r\n  httpMethod,\r\n  queryID,\r\n  parameters,\r\n  queryStrParameters,\r\n  headers\r\n) {\r\n  const queryUrlParametersStr = `/query/${queryID}${queryParamsConstructor(\r\n    parameters\r\n  )}`;\r\n  switch (httpMethod) {\r\n    case 'get':\r\n      return await get(queryUrlParametersStr, queryStrParameters, headers);\r\n    case 'post':\r\n      return await post(\r\n        queryUrlParametersStr,\r\n        undefined,\r\n        queryStrParameters,\r\n        headers\r\n      );\r\n    case 'put':\r\n      return await put(\r\n        queryUrlParametersStr,\r\n        undefined,\r\n        queryStrParameters,\r\n        headers\r\n      );\r\n    case 'delete':\r\n      return await _delete(queryUrlParametersStr, queryStrParameters, headers);\r\n\r\n    default:\r\n      return await get(queryUrlParametersStr, queryStrParameters, headers);\r\n  }\r\n}\r\n//Function to utalize data discovery\r\nasync function dataDiscovery(\r\n  httpMethod,\r\n  database,\r\n  parameters,\r\n  queryStrParameters = {},\r\n  body = undefined,\r\n  headers\r\n) {\r\n  const dataDiscoveryUrlParametersStr = `/db/${database}${dataDiscoveryParamsConstructor(\r\n    parameters\r\n  )}`;\r\n  switch (httpMethod) {\r\n    case 'get':\r\n      return await get(\r\n        dataDiscoveryUrlParametersStr,\r\n        queryStrParameters,\r\n        headers\r\n      );\r\n    case 'post':\r\n      return await post(\r\n        dataDiscoveryUrlParametersStr,\r\n        body,\r\n        queryStrParameters,\r\n        headers\r\n      );\r\n    case 'put':\r\n      return await put(\r\n        dataDiscoveryUrlParametersStr,\r\n        body,\r\n        queryStrParameters,\r\n        headers\r\n      );\r\n    case 'delete':\r\n      return await _delete(\r\n        dataDiscoveryUrlParametersStr,\r\n        queryStrParameters,\r\n        headers\r\n      );\r\n\r\n    default:\r\n      return await get(\r\n        dataDiscoveryUrlParametersStr,\r\n        queryStrParameters,\r\n        headers\r\n      );\r\n  }\r\n}\r\n//helper functions\r\n//handles the requests responce\r\nasync function handleResponse(response) {\r\n  return await response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n\r\n    if (!response.ok) {\r\n      const error = (data && data.message) || response.statusText;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return data;\r\n  });\r\n}\r\n//help construct url path from array for data discovery\r\nfunction dataDiscoveryParamsConstructor(queryParamsArr) {\r\n  let pathStr = '';\r\n  if (queryParamsArr) {\r\n    queryParamsArr.map((param) => {\r\n      return (pathStr += `/${param}`);\r\n    });\r\n  }\r\n  return pathStr;\r\n}\r\n//help construct string url path from object for ease of use\r\nfunction queryParamsConstructor(queryParamsObj) {\r\n  let pathStr = '';\r\n  Object.keys(queryParamsObj).forEach(function eachKey(key) {\r\n    pathStr += `/${key}/${queryParamsObj[key]}`;\r\n  });\r\n  return pathStr;\r\n}\r\n//help construct string options for url\r\nfunction queryStrParamsConstructor(queryStrParamsObj) {\r\n  let queryStrParams = '?';\r\n  Object.keys(queryStrParamsObj).forEach(function eachKey(key) {\r\n    queryStrParams += `${key}=${queryStrParamsObj[key]}&`;\r\n  });\r\n  return queryStrParams;\r\n}\r\n","C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\cookies.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\sdk\\Context.js",[],"C:\\SlashDB\\task-app - With_SDK\\src\\Test.js",[],"C:\\task-app-slashdb\\src\\index.js",[],"C:\\task-app-slashdb\\src\\App.js",[],"C:\\task-app-slashdb\\src\\sdk\\Context.js",[],"C:\\task-app-slashdb\\src\\Test.js",[],"C:\\task-app-slashdb\\src\\Login.js",[],"C:\\task-app-slashdb\\src\\ListApp.js",[],"C:\\task-app-slashdb\\src\\ProtectedRoute.js",[],"C:\\task-app-slashdb\\src\\components\\Header.js",[],"C:\\task-app-slashdb\\src\\components\\Lists.js",[],"C:\\task-app-slashdb\\src\\sdk\\auth.js",[],"C:\\task-app-slashdb\\src\\sdk\\hooks.js",["277"],"C:\\task-app-slashdb\\src\\components\\NewListArea.js",[],"C:\\task-app-slashdb\\src\\components\\List.js",[],"C:\\task-app-slashdb\\src\\sdk\\slashdb.js",["278","279","280","281"],"C:\\task-app-slashdb\\src\\components\\Name.js",[],"C:\\task-app-slashdb\\src\\components\\Task.js",[],"C:\\task-app-slashdb\\src\\sdk\\cookies.js",[],"C:\\Current\\App\\src\\index.js",[],["282","283"],"C:\\Current\\App\\src\\App.js",[],"C:\\Current\\App\\src\\sdk\\Context.js",[],"C:\\Current\\App\\src\\ListApp.js",[],"C:\\Current\\App\\src\\Test.js",[],["284","285"],"C:\\Current\\App\\src\\Login.js",[],"C:\\Current\\App\\src\\ProtectedRoute.js",[],"C:\\Current\\App\\src\\components\\Header.js",[],"C:\\Current\\App\\src\\components\\Lists.js",[],"C:\\Current\\App\\src\\sdk\\auth.js",[],"C:\\Current\\App\\src\\components\\NewListArea.js",[],"C:\\Current\\App\\src\\sdk\\hooks.js",[],"C:\\Current\\App\\src\\components\\List.js",[],"C:\\Current\\App\\src\\sdk\\slashdb.js",["286","287","288","289"],"/**\n * Vanila Javascript methods for use of Slashdb in javascript based project.\n * Also serves as under the hood methods for React specific functionality.\n */\n\n//import cookie handling functionality from cookies.js\nimport { setCookie, getCookie, delete_cookie } from './cookies';\n\n//export all exposed functions\nexport const slashDB = {\n  setUp,\n  get,\n  post,\n  put,\n  delete: _delete,\n  executeQuery,\n  dataDiscovery,\n  authenticateCookieSessionLogin,\n  authenticateCookieSessionLogout,\n  isAuthenticated,\n  getIsAuthenticated,\n  setIsAuthenticated,\n};\n\n//Declare local variables. Will serve to hold vital set up info provided by user.\nlet baseUrl = '';\nlet dataFormat = ``;\nlet apiKeyValue = ``;\n\n//set initial value for isAuthenticatedVar. Used to check if user session is valid.\nlet isAuthenticatedVar = false;\n\n/**\n * Set internal variables values for server connection.\n *\n * @param {String} baseUrlPath - Root path of slashdb server. Example http://localhost:8000.\n * @param {Object} setUpOptions - Setup options for use and connection to slashdb server. Key value format.\n * @param {String} setUpOptions.dataFormatExt - Format of data. Json, XML, CSV, HTML, XSD.\n * @param {String} setUpOptions.apikey - API key for authentication purposes.\n */\nfunction setUp(baseUrlPath, setUpOptions) {\n  baseUrl = baseUrlPath;\n  if (setUpOptions) {\n    setUpOptions.dataFormatExt &&\n      (dataFormat = `.${setUpOptions.dataFormatExt}`);\n    setUpOptions.apikey && (apiKeyValue = `${setUpOptions.apikey}`);\n  }\n}\n\n/**\n * Login via username and password - Cookie Session authentication. Perform POST request to slashdb/login and based on response\n * validate or reject session. Set or delete cookie.\n * Send POST request with login: username, password: password as payload.\n *\n * @param {String} username - Username of user.\n * @param {String} password - password of user.\n */\nasync function authenticateCookieSessionLogin(username, password) {\n  const temp = dataFormat;\n  dataFormat = '';\n  const urlPath = '/login';\n  const body = { login: username, password: password };\n  await raw('POST', urlPath, body, undefined, undefined, true).then((res) => {\n    if (res) {\n      if (res.status === 200 || 304) {\n        isAuthenticatedVar = true;\n        setCookie('user_id', username);\n      } else {\n        isAuthenticatedVar = false;\n        delete_cookie('user_id');\n      }\n    }\n  });\n  dataFormat = temp;\n}\n\n/**\n * Send request to log out user. Delete cookie.\n *\n */\nasync function authenticateCookieSessionLogout() {\n  const temp = dataFormat;\n  dataFormat = '';\n  const urlPath = '/logout';\n  await raw('GET', urlPath, undefined, undefined, undefined, true).then(() => {\n    isAuthenticatedVar = false;\n    delete_cookie('user_id');\n  });\n\n  dataFormat = temp;\n}\n\n/**\n * Check if session is valid. Check if user is still logged in.\n * Set inernal variable isAuthenticatedVar to true of false based on response.\n * @return {boolean} getIsAuthenticated()\n */\nasync function isAuthenticated() {\n  const localUser = getCookie('user_id');\n  const url = `/userdef/${localUser}`;\n\n  await raw('GET', url, undefined, undefined, undefined, true)\n    .then((response) => {\n      return response.status === 200;\n    })\n    .then((value) => {\n      setIsAuthenticated(value);\n    });\n  return getIsAuthenticated();\n}\n\n/**\n * Returns value of isAuthenticatedVar.\n *\n * @return {boolean} isAuthenticatedVar. True or False.\n */\nfunction getIsAuthenticated() {\n  return isAuthenticatedVar;\n}\n\n/**\n * Set value of isAuthenticatedVar.\n *\n * @param {boolean} x Value isAuthenticatedVar assumes.\n */\nfunction setIsAuthenticated(x) {\n  isAuthenticatedVar = x;\n}\n\n/** Internal method for handling HTTP requests\n *\n * @param {String} httpMethod - HTTP Method to be used in in the http request send.\n * @param {String} urlPath - Url path to be added to base url path provided in SetUp where request will be made.\n * @param {Object} body - payload to be send. Object of key value pairs.\n * @param {Object} queryStrParams - params to be send via url.\n * @param {Object} headers - Header params to be included. Object of key value pairs.\n * @param {Boolean} onlyRes - Only response needed or expecting incoming payload.\n * @returns {Boolea} returnObj.data -response payload\n * @returns {Object} returnObj.res -response\n */\nasync function raw(\n  httpMethod,\n  urlPath,\n  body,\n  queryStrParams,\n  headers,\n  onlyRes\n) {\n  const queryStrParameters =\n    queryStrParams !== undefined\n      ? queryStrParamsConstructor(queryStrParams)\n      : '';\n  const url = baseUrl + urlPath + queryStrParameters;\n  const requestOptions = {\n    method: `${httpMethod}`,\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      apikey: apiKeyValue !== undefined ? apiKeyValue : null,\n      ...headers,\n    },\n    body: body !== undefined ? JSON.stringify(body) : null,\n  };\n\n  const returnObj = { data: null, res: null };\n  try {\n    await fetch(url, requestOptions)\n      .then((response) => {\n        returnObj.res = response;\n        returnObj.data = onlyRes ? null : handleResponse(response);\n      })\n      .catch((error) => {\n        console.log(error.response);\n      });\n  } catch (error) {\n    console.log(error);\n  }\n  if (onlyRes) {\n    return returnObj.res;\n  } else {\n    return [returnObj.data, returnObj.res];\n  }\n}\n\n/** Internal method for handling HTTP GET requests\n *\n * @param {String} urlPath - Url path to be added to base url path provided in SetUp where request will be made.\n * @param {String} queryStrParameters - params to be send via url.\n * @param {Object} headers - Header params to be included. Object of key value pairs.\n * @returns {Object} data - response payload\n */\nasync function get(urlPath, queryStrParameters, headers) {\n  const [data, res] = await raw(\n    'GET',\n    urlPath,\n    undefined,\n    queryStrParameters,\n    headers\n  );\n  return data;\n}\n\n/** Internal method for handling HTTP POST requests\n *\n * @param {String} urlPath - Url path to be added to base url path provided in SetUp where request will be made.\n * @param {Object} body - payload to be send. Object of key value pairs.\n * @param {String} queryStrParameters - params to be send via url.\n * @param {Object} headers - Header params to be included. Object of key value pairs.\n * @returns {Object} data - response payload\n */\nasync function post(urlPath, body, queryStrParameters, headers) {\n  const [data, res] = await raw(\n    'POST',\n    urlPath,\n    body,\n    queryStrParameters,\n    headers\n  );\n  return data;\n}\n/** Internal method for handling HTTP POST requests\n *\n * @param {String} urlPath - Url path to be added to base url path provided in SetUp where request will be made.\n * @param {Object} body - payload to be send. Object of key value pairs.\n * @param {String} queryStrParameters - params to be send via url.\n * @param {Object} headers - Header params to be included. Object of key value pairs.\n * @returns {Object}\n * @param  data - response payload\n */\nasync function put(urlPath, body, queryStrParameters, headers) {\n  const [data, res] = await raw(\n    'PUT',\n    urlPath,\n    body,\n    queryStrParameters,\n    headers\n  );\n  return data;\n}\n/** Internal method for handling HTTP POST requests\n *\n * @param {String} urlPath - Url path to be added to base url path provided in SetUp where request will be made.\n * @param {String} queryStrParameters - params to be send via url.\n * @param {Object} headers - Header params to be included. Object of key value pairs.\n * @returns {Object} data - response payload\n */\nasync function _delete(urlPath, queryStrParameters, headers) {\n  const [data, res] = await raw(\n    'DELETE',\n    urlPath,\n    undefined,\n    queryStrParameters,\n    headers\n  );\n  return data;\n}\n\n/** Method to utalize SQLpassthrough - for executing a query\n *\n * @param {String} httpMethod - HTTP Method to be used in in the http request send.\n * @param {String} queryID - Name of as is in SlashDB interface.\n * @param {Object} parameters - params to be send via url.\n * @param {Object} queryStrParameters - Specific params to be passed in url string for query in object as key value pair format.\n * @param {Object} headers - Header params to be included. Object of key value pairs.\n * @returns\n */\nasync function executeQuery(\n  httpMethod,\n  queryID,\n  parameters,\n  queryStrParameters,\n  headers\n) {\n  const queryUrlParametersStr = `/query/${queryID}${queryParamsConstructor(\n    parameters\n  )}`;\n  switch (httpMethod) {\n    case 'get':\n      return await get(queryUrlParametersStr, queryStrParameters, headers);\n    case 'post':\n      return await post(\n        queryUrlParametersStr,\n        undefined,\n        queryStrParameters,\n        headers\n      );\n    case 'put':\n      return await put(\n        queryUrlParametersStr,\n        undefined,\n        queryStrParameters,\n        headers\n      );\n    case 'delete':\n      return await _delete(queryUrlParametersStr, queryStrParameters, headers);\n\n    default:\n      return await get(queryUrlParametersStr, queryStrParameters, headers);\n  }\n}\n//Function to utalize data discovery feature of SlashDB. Basicly GET, POST, PUT or DELETE interaction with remote database.\n/**\n *\n * @param {String} httpMethod - HTTP Method to be used in in the http request send.\n * @param {String} database - Name of database to be accessed\n * @param {Object} parameters - params to be send via url.\n * @param {*} queryStrParameters\n * @param {Object} body - payload to be send. Object of key value pairs.\n * @param {Object} headers - Header params to be included. Object of key value pairs.\n * @returns\n */\nasync function dataDiscovery(\n  httpMethod,\n  database,\n  parameters,\n  queryStrParameters,\n  body = undefined,\n  headers\n) {\n  const dataDiscoveryUrlParametersStr = `/db/${database}${dataDiscoveryParamsConstructor(\n    parameters\n  )}`;\n  switch (httpMethod) {\n    case 'get':\n      return await get(\n        dataDiscoveryUrlParametersStr,\n        queryStrParameters,\n        headers\n      );\n    case 'post':\n      return await post(\n        dataDiscoveryUrlParametersStr,\n        body,\n        queryStrParameters,\n        headers\n      );\n    case 'put':\n      return await put(\n        dataDiscoveryUrlParametersStr,\n        body,\n        queryStrParameters,\n        headers\n      );\n    case 'delete':\n      return await _delete(\n        dataDiscoveryUrlParametersStr,\n        queryStrParameters,\n        headers\n      );\n\n    default:\n      return await get(\n        dataDiscoveryUrlParametersStr,\n        queryStrParameters,\n        headers\n      );\n  }\n}\n\n//helper functions\n\n/** Helper function to handle requests responce\n *\n * @param {*} response\n * @returns {Object} data\n */\nasync function handleResponse(response) {\n  return await response.text().then((text) => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\n/**\n * Help construct url path from array for data discovery.\n *\n * @param {array} queryParamsArr Array of path params.\n * @return {String} String format of params for url passing eg. /arra[0]/array[1].../array[n]\n */\nfunction dataDiscoveryParamsConstructor(queryParamsArr) {\n  let pathStr = '';\n  if (queryParamsArr) {\n    queryParamsArr.map((param) => {\n      return (pathStr += `/${param}`);\n    });\n  }\n  return pathStr;\n}\n\n/**\n * Help construct string url path from object for query params. Any params that are required by query to execute.\n * Such as if query requires TaskListId to execute - receive TaskListId: 1 - return /TaskListId/1\n *\n * @param {obj} queryParamsObj Object of key and value pairs.\n * @return {String} String format of params for url passing eg. /key(0)/value[key(0)].../key(n)/value[key(n)].\n */\nfunction queryParamsConstructor(queryParamsObj) {\n  let pathStr = '';\n  Object.keys(queryParamsObj).forEach(function eachKey(key) {\n    pathStr += `/${key}/${queryParamsObj[key]}`;\n  });\n  return pathStr;\n}\n/**\n * Help construct string url path from object for query options params.  Such as limit # of rows, offset # of rows eg. ?limit=23\n *\n * @param {obj} queryParamsObj Object of key and value pairs.\n * @return {String} String format of params for url passing eg. ?key(0)=value[key(0)]&...key(n)=value[key(n)]&.\n */\nfunction queryStrParamsConstructor(queryStrParamsObj) {\n  let queryStrParams = '?';\n  Object.keys(queryStrParamsObj).forEach(function eachKey(key) {\n    queryStrParams += `${key}=${queryStrParamsObj[key]}&`;\n  });\n  return queryStrParams;\n}\n","C:\\Current\\App\\src\\components\\Name.js",[],["290","291"],"C:\\Current\\App\\src\\components\\Task.js",["292"],"import React from 'react';\nimport Name from './Name';\n\nconst Task = (props) => {\n  const { task, getTasks, putTask, deleteTask, executeMyQuery } = props;\n  const location = ['TaskItem', 'TaskItemId', `${task.TaskItemId}`];\n\n  const taskItemStyle = {\n    listStyleType: 'none',\n    padding: '7.5px',\n    color: 'white',\n    margin: '10px',\n    verticalAlign: 'middle',\n  };\n\n  const removeButtonStyle = {\n    textAlign: 'center',\n    verticalAlign: 'middle',\n    margin: 'auto',\n    lineHeight: '130%',\n    outline: 'none',\n    border: 'none',\n    color: '#d10000',\n    borderRadius: '10px',\n    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.3)',\n    cursor: 'pointer',\n  };\n\n  const checkStyle = {\n    cursor: 'pointer',\n    verticalAlign: 'middle',\n    margin: 'auto',\n    marginRight: '6px',\n  };\n\n  return (\n    <li style={taskItemStyle} key={task.TaskItemId}>\n      <Name\n        style={{\n          textDecoration: task.Checked ? 'line-through' : 'none',\n          fontSize: '1rem',\n          height: 'auto',\n          margin: 'auto',\n        }}\n        fieldName=\"Task\"\n        fieldValue={task.Task}\n        update={putTask}\n        location={location}\n        //get={getTasks}\n      ></Name>\n      <div\n        style={{\n          display: 'inline',\n          float: 'right',\n          verticalAlign: 'middle',\n        }}\n      >\n        <input\n          style={checkStyle}\n          type=\"checkbox\"\n          checked={task.Checked}\n          onChange={() => {\n            putTask(['TaskItem', 'TaskItemId', `${task.TaskItemId}`], {\n              Checked: !task.Checked,\n            }).then(() => {\n              executeMyQuery('get', 'percent-complete', {\n                TaskListId: `${task.TaskListId}`,\n              });\n            });\n          }}\n        ></input>\n        <button\n          style={removeButtonStyle}\n          onClick={() => {\n            deleteTask(['TaskItem', 'TaskItemId', `${task.TaskItemId}`]).then(\n              () => {\n                executeMyQuery('get', 'percent-complete', {\n                  TaskListId: `${task.TaskListId}`,\n                });\n              }\n            );\n          }}\n        >\n          X\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default Task;\n","C:\\Current\\App\\src\\sdk\\cookies.js",[],{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","replacedBy":"296"},{"ruleId":"293","replacedBy":"297"},{"ruleId":"295","replacedBy":"298"},{"ruleId":"299","severity":1,"message":"300","line":3,"column":10,"nodeType":"301","messageId":"302","endLine":3,"endColumn":18},{"ruleId":"303","severity":1,"message":"304","line":149,"column":6,"nodeType":"305","endLine":149,"endColumn":8,"suggestions":"306"},{"ruleId":"293","replacedBy":"307"},{"ruleId":"295","replacedBy":"308"},{"ruleId":"293","replacedBy":"309"},{"ruleId":"295","replacedBy":"310"},{"ruleId":"299","severity":1,"message":"311","line":1,"column":31,"nodeType":"301","messageId":"302","endLine":1,"endColumn":44},{"ruleId":"299","severity":1,"message":"312","line":144,"column":16,"nodeType":"301","messageId":"302","endLine":144,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":154,"column":16,"nodeType":"301","messageId":"302","endLine":154,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":164,"column":16,"nodeType":"301","messageId":"302","endLine":164,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":175,"column":16,"nodeType":"301","messageId":"302","endLine":175,"endColumn":19},{"ruleId":"299","severity":1,"message":"311","line":1,"column":31,"nodeType":"301","messageId":"302","endLine":1,"endColumn":44},{"ruleId":"299","severity":1,"message":"312","line":144,"column":16,"nodeType":"301","messageId":"302","endLine":144,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":154,"column":16,"nodeType":"301","messageId":"302","endLine":154,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":164,"column":16,"nodeType":"301","messageId":"302","endLine":164,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":175,"column":16,"nodeType":"301","messageId":"302","endLine":175,"endColumn":19},{"ruleId":"293","replacedBy":"313"},{"ruleId":"295","replacedBy":"314"},{"ruleId":"293","replacedBy":"315"},{"ruleId":"295","replacedBy":"316"},{"ruleId":"299","severity":1,"message":"312","line":194,"column":16,"nodeType":"301","messageId":"302","endLine":194,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":213,"column":16,"nodeType":"301","messageId":"302","endLine":213,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":232,"column":16,"nodeType":"301","messageId":"302","endLine":232,"endColumn":19},{"ruleId":"299","severity":1,"message":"312","line":249,"column":16,"nodeType":"301","messageId":"302","endLine":249,"endColumn":19},{"ruleId":"293","replacedBy":"317"},{"ruleId":"295","replacedBy":"318"},{"ruleId":"299","severity":1,"message":"319","line":5,"column":17,"nodeType":"301","messageId":"302","endLine":5,"endColumn":25},"no-native-reassign",["320"],"no-negated-in-lhs",["321"],["320"],["321"],"no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body', 'fct', and 'url'. Either include them or remove the dependency array.","ArrayExpression",["322"],["320"],["321"],["320"],["321"],"'createContext' is defined but never used.","'res' is assigned a value but never used.",["320"],["321"],["320"],["321"],["320"],["321"],"'getTasks' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"323","fix":"324"},"Update the dependencies array to be: [body, fct, url]",{"range":"325","text":"326"},[3558,3560],"[body, fct, url]"]